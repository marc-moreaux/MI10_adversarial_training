

!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix {
        X: !pkl: '/home/marc/data/mnist_train_X.pkl',
        y: !pkl: '/home/marc/data/mnist_train_y.pkl',
        y_labels: 10,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: 500,
                     sparse_init: 15
                 }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: 500,
                     sparse_init: 10
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 10,
                     irange: 0.
                 }
                ],
        nvis: 784,
        path: "%(save_path)s/mlp%(learning_eps)s.pkl",
        # layers: [ !obj:pylearn2.models.mlp.Softmax {
        #              layer_name: 'y',
        #              n_classes: 10,
        #              irange: 0.
        #          }
        #         ],
        # nvis: 784,
        # path: 'mlp.pkl',
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 200,
        learning_rate: 1e-13,
        monitoring_dataset: {
            'train' : *train,
            'valid' : !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix {
                X: !pkl: '/home/marc/data/mnist_valid_X.pkl',
                y: !pkl: '/home/marc/data/mnist_valid_y.pkl',
                y_labels: 10,
            },
            'test' : !pkl: "mnist_train_adv.pkl",
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 1
        },
        cost: !obj:costAdv.AdversarialCost {
            eps: %(training_eps)f
        },
    },
    save_path: "%(save_path)s/TRASH.pkl",
    save_freq : 1
}

# python -c "from pylearn2.utils import serial; \
#            train_obj = serial.load_train_file('mlp.yaml'); \
#            train_obj.main_loop()"



