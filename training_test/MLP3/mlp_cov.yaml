####
# On the TPE dataset
# Train with adversarial cost (given as paramaeter, 0=not adversarial)
# + Momentum


####
# Parameters:
# learning_eps: is the eps for adversarial twists
# save_path: is the path to save the results... 

!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix {
        X: !pkl: '/home/marc/data/COV_train_x.pkl',
        y: !pkl: '/home/marc/data/COV_train_y.pkl',
        y_labels: 7,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: 120,
                     sparse_init: 50
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
        nvis: 54,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 200,
        learning_rate: .01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        monitoring_dataset: {
            'train' : *train,
            'valid' : !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix {
                X: !pkl: '/home/marc/data/COV_valid_x.pkl',
                y: !pkl: '/home/marc/data/COV_valid_y.pkl',
                y_labels: 7,
            },
            'test' : !obj:pylearn2.datasets.dense_design_matrix.DenseDesignMatrix {
                X: !pkl: '/home/marc/data/COV_test_x.pkl',
                y: !pkl: '/home/marc/data/COV_test_y.pkl',
                y_labels: 7,
            }, },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 100
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 1500
                }
            ]
        },
        cost: !obj:costAdv.AdversarialCost {
            learning_eps: %(learning_eps)f
        }
    },
    extensions: [
           !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)s/mem/mlp_COV_%(learning_eps)s.pkl",
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
    # save_path: "%(save_path)s/mlp%(learning_eps)s.pkl",
    # save_freq : 20
}

# python -c "from pylearn2.utils import serial; \
#            train_obj = serial.load_train_file('mlp.yaml'); \
#            train_obj.main_loop()"



